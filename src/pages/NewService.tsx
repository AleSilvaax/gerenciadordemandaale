
import React, { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Badge } from "@/components/ui/badge";
import { 
  CalendarIcon, 
  MapPin, 
  User, 
  FileText, 
  Save, 
  ArrowLeft,
  Plus
} from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/context/AuthContext";
import { useTeamMembers } from "@/hooks/useTeamMembers";
import { createServiceInDatabase } from "@/services/serviceCrud";
import { Service, ServicePriority, ServiceStatus } from "@/types/serviceTypes";
import { toast } from "sonner";

export default function NewService() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { teamMembers } = useTeamMembers();
  
  const [isLoading, setIsLoading] = useState(false);
  const [dueDate, setDueDate] = useState<Date>();
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    location: '',
    client: '',
    address: '',
    city: '',
    priority: 'media' as ServicePriority,
    serviceType: 'Vistoria',
    technicianId: '',
    estimatedHours: '',
    notes: ''
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      toast.error('Título é obrigatório');
      return;
    }
    
    if (!formData.location.trim()) {
      toast.error('Local é obrigatório');
      return;
    }

    if (!user?.id) {
      toast.error('Usuário não autenticado');
      return;
    }

    setIsLoading(true);

    try {
      // Find selected technician
      const selectedTechnician = teamMembers?.find(t => t.id === formData.technicianId) || {
        id: '0',
        name: 'Não atribuído',
        avatar: '',
        role: 'tecnico' as const
      };

      const newService: Omit<Service, "id"> = {
        title: formData.title.trim(),
        description: formData.description.trim() || undefined,
        location: formData.location.trim(),
        client: formData.client.trim() || undefined,
        address: formData.address.trim() || undefined,
        city: formData.city.trim() || undefined,
        status: 'pendente' as ServiceStatus,
        priority: formData.priority,
        serviceType: formData.serviceType,
        technician: selectedTechnician,
        createdBy: user.id,
        creationDate: new Date().toISOString(),
        dueDate: dueDate?.toISOString(),
        estimatedHours: formData.estimatedHours ? parseInt(formData.estimatedHours) : undefined,
        notes: formData.notes.trim() || undefined,
        number: '', // Will be generated by the service
        messages: [],
        photos: [],
        photoTitles: []
      };

      console.log('[NewService] Criando serviço:', newService);

      const result = await createServiceInDatabase(newService);

      if (result.created) {
        toast.success('Demanda criada com sucesso!');
        
        if (result.technicianError) {
          toast.warning(result.technicianError);
        }
        
        navigate('/demandas');
      } else {
        toast.error('Erro ao criar demanda');
      }
    } catch (error: any) {
      console.error('[NewService] Erro ao criar serviço:', error);
      toast.error(error.message || 'Erro ao criar demanda');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex-1 space-y-6 p-8 pt-6">
      <div className="flex items-center space-x-4">
        <Button variant="outline" size="icon" onClick={() => navigate(-1)}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Nova Demanda</h2>
          <p className="text-muted-foreground">
            Preencha as informações para criar uma nova demanda de serviço
          </p>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid gap-6 md:grid-cols-2">
          {/* Basic Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Informações Básicas
              </CardTitle>
              <CardDescription>
                Dados principais da demanda
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Título *</label>
                <Input
                  value={formData.title}
                  onChange={(e) => handleInputChange('title', e.target.value)}
                  placeholder="Ex: Vistoria Elétrica - Prédio Comercial"
                  required
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Descrição</label>
                <Textarea
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  placeholder="Descreva os detalhes da demanda..."
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Tipo de Serviço</label>
                  <Select
                    value={formData.serviceType}
                    onValueChange={(value) => handleInputChange('serviceType', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione o tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Vistoria">Vistoria</SelectItem>
                      <SelectItem value="Instalação">Instalação</SelectItem>
                      <SelectItem value="Manutenção">Manutenção</SelectItem>
                      <SelectItem value="Reparo">Reparo</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">Prioridade</label>
                  <Select
                    value={formData.priority}
                    onValueChange={(value) => handleInputChange('priority', value as ServicePriority)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione a prioridade" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="baixa">
                        <div className="flex items-center">
                          <Badge variant="secondary" className="mr-2">Baixa</Badge>
                        </div>
                      </SelectItem>
                      <SelectItem value="media">
                        <div className="flex items-center">
                          <Badge variant="outline" className="mr-2">Média</Badge>
                        </div>
                      </SelectItem>
                      <SelectItem value="alta">
                        <div className="flex items-center">
                          <Badge variant="destructive" className="mr-2">Alta</Badge>
                        </div>
                      </SelectItem>
                      <SelectItem value="urgente">
                        <div className="flex items-center">
                          <Badge variant="destructive" className="mr-2">Urgente</Badge>
                        </div>
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Location and Client */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MapPin className="h-5 w-5" />
                Local e Cliente
              </CardTitle>
              <CardDescription>
                Informações de localização e cliente
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Local *</label>
                <Input
                  value={formData.location}
                  onChange={(e) => handleInputChange('location', e.target.value)}
                  placeholder="Ex: Shopping Center ABC"
                  required
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Cliente</label>
                <Input
                  value={formData.client}
                  onChange={(e) => handleInputChange('client', e.target.value)}
                  placeholder="Nome do cliente ou empresa"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Endereço</label>
                <Input
                  value={formData.address}
                  onChange={(e) => handleInputChange('address', e.target.value)}
                  placeholder="Endereço completo"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Cidade</label>
                <Input
                  value={formData.city}
                  onChange={(e) => handleInputChange('city', e.target.value)}
                  placeholder="Cidade"
                />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Assignment and Schedule */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Atribuição e Agenda
            </CardTitle>
            <CardDescription>
              Configure responsável e prazos
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-3">
              <div className="space-y-2">
                <label className="text-sm font-medium">Técnico Responsável</label>
                <Select
                  value={formData.technicianId}
                  onValueChange={(value) => handleInputChange('technicianId', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione um técnico" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">Não atribuído</SelectItem>
                    {teamMembers?.filter(member => member.role === 'tecnico').map((member) => (
                      <SelectItem key={member.id} value={member.id}>
                        {member.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Prazo de Conclusão</label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !dueDate && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {dueDate ? format(dueDate, "dd/MM/yyyy") : "Selecionar data"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={dueDate}
                      onSelect={setDueDate}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Horas Estimadas</label>
                <Input
                  type="number"
                  value={formData.estimatedHours}
                  onChange={(e) => handleInputChange('estimatedHours', e.target.value)}
                  placeholder="Ex: 8"
                  min="1"
                  max="100"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Additional Notes */}
        <Card>
          <CardHeader>
            <CardTitle>Observações Adicionais</CardTitle>
            <CardDescription>
              Informações complementares sobre a demanda
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Textarea
              value={formData.notes}
              onChange={(e) => handleInputChange('notes', e.target.value)}
              placeholder="Adicione observações importantes, requisitos especiais, ou instruções específicas..."
              rows={4}
            />
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <div className="flex gap-4">
          <Button
            type="submit"
            disabled={isLoading}
            className="flex-1 max-w-xs"
          >
            {isLoading ? (
              <div className="flex items-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Criando...
              </div>
            ) : (
              <>
                <Save className="mr-2 h-4 w-4" />
                Criar Demanda
              </>
            )}
          </Button>
          
          <Button
            type="button"
            variant="outline"
            onClick={() => navigate(-1)}
            disabled={isLoading}
          >
            Cancelar
          </Button>
        </div>
      </form>
    </div>
  );
}
